generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Link {
  id               String          @id @default(cuid())
  originalUrl      String
  shortCode        String          @unique
  title            String?
  description      String?
  clicks           Int             @default(0)
  isActive         Boolean         @default(true)
  expiresAt        DateTime?
  countdownSeconds Int             @default(5)
  userId           String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  analytics        LinkAnalytics[]
  user             User?           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("links")
}

model LinkAnalytics {
  id        String   @id @default(cuid())
  linkId    String
  ipAddress String?
  userAgent String?
  referer   String?
  country   String?
  city      String?
  clickedAt DateTime @default(now())
  link      Link     @relation(fields: [linkId], references: [id], onDelete: Cascade)

  @@map("link_analytics")
}

model User {
  id               String              @id @default(cuid())
  email            String              @unique
  name             String?
  avatar           String?
  role             UserRole            @default(USER)
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  employeeProfile  Employee?
  leaveRequests    LeaveRequest[]
  links            Link[]
  notifications    Notification[]
  payrolls         Payroll[]
  assignedProjects ProjectAssignment[]
  createdProjects  Project[]           @relation("ProjectCreator")

  @@map("users")
}

model Employee {
  id               String         @id @default(cuid())
  userId           String         @unique
  employeeId       String         @unique
  department       String
  position         String
  salary           Decimal        @db.Decimal(10, 2)
  joinDate         DateTime
  status           EmployeeStatus @default(ACTIVE)
  performanceScore Float?
  performanceGrade String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("employees")
}

model Project {
  id          String              @id @default(cuid())
  name        String
  description String?
  status      ProjectStatus       @default(PLANNING)
  priority    ProjectPriority     @default(MEDIUM)
  progress    Int                 @default(0)
  budget      Decimal?            @db.Decimal(10, 2)
  spent       Decimal?            @db.Decimal(10, 2)
  startDate   DateTime?
  dueDate     DateTime?
  creatorId   String
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  assignments ProjectAssignment[]
  creator     User                @relation("ProjectCreator", fields: [creatorId], references: [id])

  @@map("projects")
}

model ProjectAssignment {
  id         String   @id @default(cuid())
  projectId  String
  userId     String
  assignedAt DateTime @default(now())
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@map("project_assignments")
}

model Invoice {
  id          String        @id @default(cuid())
  invoiceId   String        @unique
  clientName  String
  clientEmail String
  amount      Decimal       @db.Decimal(10, 2)
  status      InvoiceStatus @default(PENDING)
  issuedAt    DateTime      @default(now())
  dueDate     DateTime
  paidAt      DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("invoices")
}

model Payroll {
  id             String        @id @default(cuid())
  userId         String
  baseSalary     Decimal       @db.Decimal(10, 2)
  bonuses        Decimal       @default(0) @db.Decimal(10, 2)
  deductions     Decimal       @default(0) @db.Decimal(10, 2)
  netPay         Decimal       @db.Decimal(10, 2)
  payPeriodStart DateTime
  payPeriodEnd   DateTime
  status         PayrollStatus @default(PENDING)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payrolls")
}

model LeaveRequest {
  id         String      @id @default(cuid())
  userId     String
  leaveType  LeaveType
  startDate  DateTime
  endDate    DateTime
  days       Int
  reason     String?
  status     LeaveStatus @default(PENDING)
  approvedBy String?
  approvedAt DateTime?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("leave_requests")
}

model JobOpening {
  id           String      @id @default(cuid())
  title        String
  department   String
  location     String
  type         JobType     @default(FULL_TIME)
  description  String
  requirements String
  salary       String?
  status       JobStatus   @default(OPEN)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  candidates   Candidate[]

  @@map("job_openings")
}

model Candidate {
  id        String          @id @default(cuid())
  name      String
  email     String
  phone     String?
  resume    String?
  status    CandidateStatus @default(APPLIED)
  jobId     String
  appliedAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  job       JobOpening      @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@map("candidates")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  title     String
  message   String
  type      NotificationType @default(INFO)
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

enum UserRole {
  USER
  ADMIN
  MANAGER
}

enum EmployeeStatus {
  ACTIVE
  INACTIVE
  TERMINATED
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum ProjectPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum InvoiceStatus {
  DRAFT
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

enum PayrollStatus {
  PENDING
  PROCESSED
  PAID
}

enum LeaveType {
  VACATION
  SICK
  PERSONAL
  MATERNITY
  PATERNITY
  BEREAVEMENT
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
}

enum JobStatus {
  OPEN
  CLOSED
  ON_HOLD
}

enum CandidateStatus {
  APPLIED
  SCREENING
  INTERVIEW
  OFFER
  HIRED
  REJECTED
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
}
